<!doctype html>
<html lang="en">
  <head>
    <%- include('../partials/head') %>
    
    <title>twofac</title>

    <link rel="stylesheet" href="/css/github.css">

    <style>
      .container { margin-top: 1em; }
    </style>
  </head>

  <body>
    <div class="container">
      <div class="row">
        <div class="five columns">
          <form action="secret/generate" method="POST">
            <label>Shared Secret</label>
            <input type="text" placeholder="..." name="sharedSecret">

            <input class="button-primary" type="submit" value="generate">
          </form>
        </div>
        <div class="seven columns">
          <p>
            Generate Steam-style <a href="https://tools.ietf.org/html/rfc6238">TOTP</a> 
            codes given a shared secret.</br>
            To be used for logging on to steam accounts with steam two factor 
            authentication without requiring you to have your phone at hand.
          </p>
        </div>

        <div class="twelve columns">
          <p>
            You can also <a href="signup">create an account</a>, allowing you to store an unlimited 
            amount of shared secrets and to instantly generate codes for all of them.<br>
            Existing user? <a href="login">Log in</a>.
          </p>
        </div>

          <pre><code data-language="javascript">
import { createHmac } from 'crypto';

export default function generate(input: string) {
  const secret = Buffer.from(
    input, input.match(/[0-9a-f]{40}/i) ? 'hex' : 'base64',
  );

  const time = Math.floor(Date.now() / 1000);

  const buffer = Buffer.allocUnsafe(8);
  buffer.writeUInt32BE(0, 0); // This will stop working in 2038!
  buffer.writeUInt32BE(Math.floor(time / 30), 4);

  let hmac = createHmac('sha1', secret).update(buffer).digest();

  const start = hmac[19] & 0x0F;
  hmac = hmac.slice(start, start + 4);

  let fullcode = hmac.readUInt32BE(0) & 0x7FFFFFFF;

  const chars = '23456789BCDFGHJKMNPQRTVWXY';

  let code = '';
  for (let i = 0; i < 5; i++) {
    code += chars.charAt(fullcode % chars.length);
    fullcode /= chars.length;
  }

  return code;
}
          </code></pre>
      </div>
    </div>

    <script src="/js/rainbow.min.js"></script>
  </body>
</html>
